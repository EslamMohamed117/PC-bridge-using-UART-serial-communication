
PC bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000078a  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000078a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000007b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000beb  00000000  00000000  00000821  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064c  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d7  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f1  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000712  00000712  00000786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000102  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_11 00000014  00000694  00000694  00000708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 0000004a  00000556  00000556  000005ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 0000004a  000005a0  000005a0  00000614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.duty_cycle 00000004  00800062  00800062  0000078a  2**0
                  ALLOC
 19 .text.USART_INIT 0000004e  00000508  00000508  0000057c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.USART_Transmit 00000008  000006ec  000006ec  00000760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.USART_Receive 00000008  000006f4  000006f4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.avrlibc.fplib 0000000e  000006a8  000006a8  0000071c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.avrlibc.fplib 000000ce  00000362  00000362  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.avrlibc.fplib 00000008  000006fc  000006fc  00000770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.avrlibc.fplib 000000de  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.avrlibc.fplib 0000005e  000004aa  000004aa  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.avrlibc.fplib 0000007a  00000430  00000430  000004a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc.fplib 0000000c  000006e0  000006e0  00000754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc.fplib 00000006  0000070c  0000070c  00000780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc.fplib 0000000e  000006b6  000006b6  0000072a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc.fplib 0000000e  000006c4  000006c4  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc.fplib 00000022  00000672  00000672  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc.fplib 00000044  000005ea  000005ea  0000065e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc.fplib 0000000e  000006d2  000006d2  00000746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 00000008  00000704  00000704  00000778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 000000d4  0000028e  0000028e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc.div 00000044  0000062e  0000062e  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_1>
   8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_2>
   c:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  10:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  14:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  18:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  1c:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  20:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  24:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  28:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  2c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_11>
  30:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  34:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  38:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  3c:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  40:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  44:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  48:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  4c:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>
  50:	0c 94 89 03 	jmp	0x712	; 0x712 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 66       	ori	r16, 0x60	; 96
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d4 e0       	ldi	r29, 0x04	; 4
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000712 <__bad_interrupt>:
 712:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:

volatile char x;
volatile char mode;
int main()
{
	PORTD=0b00001100;	// Enable Pull-up for INT 0 and INT 1
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	82 bb       	out	0x12, r24	; 18
	MCUCR = 0b00001010; // INT 0 and INT 1 will be triggered when falling edge signal arrives
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	85 bf       	out	0x35, r24	; 53
	GICR = 0b11000000;  // Enable INT 0 and INT 1
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	8b bf       	out	0x3b, r24	; 59
		
	DDRA = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b00000010; // Setting direction of motor
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	8b bb       	out	0x1b, r24	; 27
	
	DDRA= 0x07;	// Setting first two pins of port A as output for controlling the driver
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PINB3);	// Setting pin 3 of port b as output for PWM signal generated at OC0
  c6:	87 b3       	in	r24, 0x17	; 23
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	87 bb       	out	0x17, r24	; 23

	// TIMER0
	TCCR0=0b01110101;	//Configure Timer0 to run at Phase correct PWM
  cc:	85 e7       	ldi	r24, 0x75	; 117
  ce:	83 bf       	out	0x33, r24	; 51
	
	USART_INIT(9600);
  d0:	60 e8       	ldi	r22, 0x80	; 128
  d2:	75 e2       	ldi	r23, 0x25	; 37
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 84 02 	call	0x508	; 0x508 <USART_INIT>
	sei();
  dc:	78 94       	sei
	while(1)
	{
		x = USART_Receive();
  de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <USART_Receive>
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(x == 'l')
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	8c 36       	cpi	r24, 0x6C	; 108
  ec:	29 f4       	brne	.+10     	; 0xf8 <main+0x4a>
			mode = x;
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
  f6:	08 c0       	rjmp	.+16     	; 0x108 <main+0x5a>
		else if(x=='f')
  f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	86 36       	cpi	r24, 0x66	; 102
  fe:	21 f4       	brne	.+8      	; 0x108 <main+0x5a>
			mode = x;
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
		if(mode == 'l')
 108:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 10c:	8c 36       	cpi	r24, 0x6C	; 108
 10e:	81 f4       	brne	.+32     	; 0x130 <main+0x82>
		{
			if(x == '0')
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	80 33       	cpi	r24, 0x30	; 48
 116:	21 f4       	brne	.+8      	; 0x120 <main+0x72>
			{
				// turn off LED.
				PORTA &= ~(1<<PINA0);
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	30 c0       	rjmp	.+96     	; 0x180 <main+0xd2>
			}
			else if(x =='1')
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	81 33       	cpi	r24, 0x31	; 49
 126:	61 f5       	brne	.+88     	; 0x180 <main+0xd2>
			{
				// turn on LED.
				PORTA |= 1<<PINA0;
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	28 c0       	rjmp	.+80     	; 0x180 <main+0xd2>
			}
		}
		else
		{
			if(x=='+') // Maximum speed
 130:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	8b 32       	cpi	r24, 0x2B	; 43
 136:	69 f4       	brne	.+26     	; 0x152 <main+0xa4>
				duty_cycle = 1;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	a0 e8       	ldi	r26, 0x80	; 128
 13e:	bf e3       	ldi	r27, 0x3F	; 63
 140:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_end>
 144:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <_end+0x1>
 148:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <_end+0x2>
 14c:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <_end+0x3>
 150:	17 c0       	rjmp	.+46     	; 0x180 <main+0xd2>
			else
				duty_cycle = ((unsigned int)x-0x30)/10.0;
 152:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	60 53       	subi	r22, 0x30	; 48
 15a:	71 09       	sbc	r23, r1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 18 02 	call	0x430	; 0x430 <__floatunsisf>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e2       	ldi	r20, 0x20	; 32
 16a:	51 e4       	ldi	r21, 0x41	; 65
 16c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__divsf3>
 170:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <_end>
 174:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <_end+0x1>
 178:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_end+0x2>
 17c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <_end+0x3>
		}
		OCR0 = (uint8_t)(255* (1-duty_cycle));
 180:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <_end>
 184:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <_end+0x1>
 188:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end+0x2>
 18c:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x3>
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	9f e3       	ldi	r25, 0x3F	; 63
 198:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__subsf3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	4f e7       	ldi	r20, 0x7F	; 127
 1a2:	53 e4       	ldi	r21, 0x43	; 67
 1a4:	0e 94 82 03 	call	0x704	; 0x704 <__mulsf3>
 1a8:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fixunssfsi>
 1ac:	6c bf       	out	0x3c, r22	; 60
	}
 1ae:	97 cf       	rjmp	.-210    	; 0xde <main+0x30>

Disassembly of section .text.__vector_11:

00000694 <__vector_11>:
}
ISR(USART_RXC_vect)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
}
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

Disassembly of section .text.__vector_1:

00000556 <__vector_1>:
ISR(INT0_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	2f 93       	push	r18
 562:	3f 93       	push	r19
 564:	4f 93       	push	r20
 566:	5f 93       	push	r21
 568:	6f 93       	push	r22
 56a:	7f 93       	push	r23
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
 570:	af 93       	push	r26
 572:	bf 93       	push	r27
 574:	ef 93       	push	r30
 576:	ff 93       	push	r31
	USART_Transmit('A');
 578:	81 e4       	ldi	r24, 0x41	; 65
 57a:	0e 94 76 03 	call	0x6ec	; 0x6ec <USART_Transmit>
}
 57e:	ff 91       	pop	r31
 580:	ef 91       	pop	r30
 582:	bf 91       	pop	r27
 584:	af 91       	pop	r26
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	7f 91       	pop	r23
 58c:	6f 91       	pop	r22
 58e:	5f 91       	pop	r21
 590:	4f 91       	pop	r20
 592:	3f 91       	pop	r19
 594:	2f 91       	pop	r18
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

Disassembly of section .text.__vector_2:

000005a0 <__vector_2>:
ISR(INT1_vect)
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	2f 93       	push	r18
 5ac:	3f 93       	push	r19
 5ae:	4f 93       	push	r20
 5b0:	5f 93       	push	r21
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	ef 93       	push	r30
 5c0:	ff 93       	push	r31
	USART_Transmit('Z');
 5c2:	8a e5       	ldi	r24, 0x5A	; 90
 5c4:	0e 94 76 03 	call	0x6ec	; 0x6ec <USART_Transmit>
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

Disassembly of section .text.USART_INIT:

00000508 <USART_INIT>:
void USART_INIT(unsigned long baud)
{
	//Set Baud Rate
	//URSEL = 0 (Default)
	unsigned short UBRR;
	UBRR = (F_CPU / (16*baud)) - 1;
 508:	dc 01       	movw	r26, r24
 50a:	cb 01       	movw	r24, r22
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	aa 1f       	adc	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	aa 1f       	adc	r26, r26
 51a:	bb 1f       	adc	r27, r27
 51c:	9c 01       	movw	r18, r24
 51e:	ad 01       	movw	r20, r26
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	44 1f       	adc	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	44 1f       	adc	r20, r20
 52e:	55 1f       	adc	r21, r21
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	72 e1       	ldi	r23, 0x12	; 18
 534:	8a e7       	ldi	r24, 0x7A	; 122
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 17 03 	call	0x62e	; 0x62e <__udivmodsi4>
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char) (UBRR >> 8);
 540:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char) UBRR;
 542:	29 b9       	out	0x09, r18	; 9
	
	
	//Enable Sender and Receiver
	SET_BIT(UCSRB,TXEN);
 544:	8a b1       	in	r24, 0x0a	; 10
 546:	88 60       	ori	r24, 0x08	; 8
 548:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 54a:	8a b1       	in	r24, 0x0a	; 10
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	8a b9       	out	0x0a, r24	; 10
	
	//8-bit Data, No Parity Mode, Asynchronous Mode (Default), 1 stop bit (Default), Clock Polarity (default) (TX rising, RX falling)
	//URSEL = 1 (Select UCSRC)
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 550:	86 e8       	ldi	r24, 0x86	; 134
 552:	80 bd       	out	0x20, r24	; 32
 554:	08 95       	ret

Disassembly of section .text.USART_Transmit:

000006ec <USART_Transmit>:
}
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 6ec:	5d 9b       	sbis	0x0b, 5	; 11
 6ee:	fe cf       	rjmp	.-4      	; 0x6ec <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 6f0:	8c b9       	out	0x0c, r24	; 12
 6f2:	08 95       	ret

Disassembly of section .text.USART_Receive:

000006f4 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
 6f4:	5f 9b       	sbis	0x0b, 7	; 11
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
 6f8:	8c b1       	in	r24, 0x0c	; 12
}
 6fa:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000006a8 <__subsf3>:
 6a8:	50 58       	subi	r21, 0x80	; 128

000006aa <__addsf3>:
 6aa:	bb 27       	eor	r27, r27
 6ac:	aa 27       	eor	r26, r26
 6ae:	0e 94 b1 01 	call	0x362	; 0x362 <__addsf3x>
 6b2:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000362 <__addsf3x>:
 362:	11 c0       	rjmp	.+34     	; 0x386 <__addsf3x+0x24>
 364:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 368:	38 f0       	brcs	.+14     	; 0x378 <__addsf3x+0x16>
 36a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 36e:	20 f0       	brcs	.+8      	; 0x378 <__addsf3x+0x16>
 370:	39 f4       	brne	.+14     	; 0x380 <__addsf3x+0x1e>
 372:	9f 3f       	cpi	r25, 0xFF	; 255
 374:	19 f4       	brne	.+6      	; 0x37c <__addsf3x+0x1a>
 376:	26 f4       	brtc	.+8      	; 0x380 <__addsf3x+0x1e>
 378:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>
 37c:	0e f4       	brtc	.+2      	; 0x380 <__addsf3x+0x1e>
 37e:	e0 95       	com	r30
 380:	e7 fb       	bst	r30, 7
 382:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_inf>
 386:	e9 2f       	mov	r30, r25
 388:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 38c:	58 f3       	brcs	.-42     	; 0x364 <__addsf3x+0x2>
 38e:	ba 17       	cp	r27, r26
 390:	62 07       	cpc	r22, r18
 392:	73 07       	cpc	r23, r19
 394:	84 07       	cpc	r24, r20
 396:	95 07       	cpc	r25, r21
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__addsf3x+0x40>
 39a:	79 f4       	brne	.+30     	; 0x3ba <__addsf3x+0x58>
 39c:	a6 f5       	brtc	.+104    	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 39e:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_zero>
 3a2:	0e f4       	brtc	.+2      	; 0x3a6 <__addsf3x+0x44>
 3a4:	e0 95       	com	r30
 3a6:	0b 2e       	mov	r0, r27
 3a8:	ba 2f       	mov	r27, r26
 3aa:	a0 2d       	mov	r26, r0
 3ac:	0b 01       	movw	r0, r22
 3ae:	b9 01       	movw	r22, r18
 3b0:	90 01       	movw	r18, r0
 3b2:	0c 01       	movw	r0, r24
 3b4:	ca 01       	movw	r24, r20
 3b6:	a0 01       	movw	r20, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	ff 27       	eor	r31, r31
 3bc:	59 1b       	sub	r21, r25
 3be:	99 f0       	breq	.+38     	; 0x3e6 <__addsf3x+0x84>
 3c0:	59 3f       	cpi	r21, 0xF9	; 249
 3c2:	50 f4       	brcc	.+20     	; 0x3d8 <__addsf3x+0x76>
 3c4:	50 3e       	cpi	r21, 0xE0	; 224
 3c6:	68 f1       	brcs	.+90     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 3c8:	1a 16       	cp	r1, r26
 3ca:	f0 40       	sbci	r31, 0x00	; 0
 3cc:	a2 2f       	mov	r26, r18
 3ce:	23 2f       	mov	r18, r19
 3d0:	34 2f       	mov	r19, r20
 3d2:	44 27       	eor	r20, r20
 3d4:	58 5f       	subi	r21, 0xF8	; 248
 3d6:	f3 cf       	rjmp	.-26     	; 0x3be <__addsf3x+0x5c>
 3d8:	46 95       	lsr	r20
 3da:	37 95       	ror	r19
 3dc:	27 95       	ror	r18
 3de:	a7 95       	ror	r26
 3e0:	f0 40       	sbci	r31, 0x00	; 0
 3e2:	53 95       	inc	r21
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <__addsf3x+0x76>
 3e6:	7e f4       	brtc	.+30     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3e8:	1f 16       	cp	r1, r31
 3ea:	ba 0b       	sbc	r27, r26
 3ec:	62 0b       	sbc	r22, r18
 3ee:	73 0b       	sbc	r23, r19
 3f0:	84 0b       	sbc	r24, r20
 3f2:	ba f0       	brmi	.+46     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	a1 f0       	breq	.+40     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 3f8:	ff 0f       	add	r31, r31
 3fa:	bb 1f       	adc	r27, r27
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	c2 f7       	brpl	.-16     	; 0x3f4 <__addsf3x+0x92>
 404:	0e c0       	rjmp	.+28     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 406:	ba 0f       	add	r27, r26
 408:	62 1f       	adc	r22, r18
 40a:	73 1f       	adc	r23, r19
 40c:	84 1f       	adc	r24, r20
 40e:	48 f4       	brcc	.+18     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 410:	87 95       	ror	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b7 95       	ror	r27
 418:	f7 95       	ror	r31
 41a:	9e 3f       	cpi	r25, 0xFE	; 254
 41c:	08 f0       	brcs	.+2      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 41e:	b0 cf       	rjmp	.-160    	; 0x380 <__addsf3x+0x1e>
 420:	93 95       	inc	r25
 422:	88 0f       	add	r24, r24
 424:	08 f0       	brcs	.+2      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 426:	99 27       	eor	r25, r25
 428:	ee 0f       	add	r30, r30
 42a:	97 95       	ror	r25
 42c:	87 95       	ror	r24
 42e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000006fc <__divsf3>:
 6fc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__divsf3x>
 700:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000001b0 <__divsf3x>:
 1b0:	10 c0       	rjmp	.+32     	; 0x1d2 <__divsf3x+0x22>
 1b2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 1b6:	58 f0       	brcs	.+22     	; 0x1ce <__divsf3x+0x1e>
 1b8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 1bc:	40 f0       	brcs	.+16     	; 0x1ce <__divsf3x+0x1e>
 1be:	29 f4       	brne	.+10     	; 0x1ca <__divsf3x+0x1a>
 1c0:	5f 3f       	cpi	r21, 0xFF	; 255
 1c2:	29 f0       	breq	.+10     	; 0x1ce <__divsf3x+0x1e>
 1c4:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_inf>
 1c8:	51 11       	cpse	r21, r1
 1ca:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 1ce:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>
 1d2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 1d6:	68 f3       	brcs	.-38     	; 0x1b2 <__divsf3x+0x2>

000001d8 <__divsf3_pse>:
 1d8:	99 23       	and	r25, r25
 1da:	b1 f3       	breq	.-20     	; 0x1c8 <__divsf3x+0x18>
 1dc:	55 23       	and	r21, r21
 1de:	91 f3       	breq	.-28     	; 0x1c4 <__divsf3x+0x14>
 1e0:	95 1b       	sub	r25, r21
 1e2:	55 0b       	sbc	r21, r21
 1e4:	bb 27       	eor	r27, r27
 1e6:	aa 27       	eor	r26, r26
 1e8:	62 17       	cp	r22, r18
 1ea:	73 07       	cpc	r23, r19
 1ec:	84 07       	cpc	r24, r20
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <__divsf3_pse+0x26>
 1f0:	9f 5f       	subi	r25, 0xFF	; 255
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	44 1f       	adc	r20, r20
 1fa:	aa 1f       	adc	r26, r26
 1fc:	a9 f3       	breq	.-22     	; 0x1e8 <__divsf3_pse+0x10>
 1fe:	35 d0       	rcall	.+106    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 200:	0e 2e       	mov	r0, r30
 202:	3a f0       	brmi	.+14     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 204:	e0 e8       	ldi	r30, 0x80	; 128
 206:	32 d0       	rcall	.+100    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	50 40       	sbci	r21, 0x00	; 0
 20c:	e6 95       	lsr	r30
 20e:	00 1c       	adc	r0, r0
 210:	ca f7       	brpl	.-14     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 212:	2b d0       	rcall	.+86     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 214:	fe 2f       	mov	r31, r30
 216:	29 d0       	rcall	.+82     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	bb 1f       	adc	r27, r27
 220:	26 17       	cp	r18, r22
 222:	37 07       	cpc	r19, r23
 224:	48 07       	cpc	r20, r24
 226:	ab 07       	cpc	r26, r27
 228:	b0 e8       	ldi	r27, 0x80	; 128
 22a:	09 f0       	breq	.+2      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 22c:	bb 0b       	sbc	r27, r27
 22e:	80 2d       	mov	r24, r0
 230:	bf 01       	movw	r22, r30
 232:	ff 27       	eor	r31, r31
 234:	93 58       	subi	r25, 0x83	; 131
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	3a f0       	brmi	.+14     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 23a:	9e 3f       	cpi	r25, 0xFE	; 254
 23c:	51 05       	cpc	r21, r1
 23e:	78 f0       	brcs	.+30     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 240:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_inf>
 244:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 248:	5f 3f       	cpi	r21, 0xFF	; 255
 24a:	e4 f3       	brlt	.-8      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 24c:	98 3e       	cpi	r25, 0xE8	; 232
 24e:	d4 f3       	brlt	.-12     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 250:	86 95       	lsr	r24
 252:	77 95       	ror	r23
 254:	67 95       	ror	r22
 256:	b7 95       	ror	r27
 258:	f7 95       	ror	r31
 25a:	9f 5f       	subi	r25, 0xFF	; 255
 25c:	c9 f7       	brne	.-14     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 25e:	88 0f       	add	r24, r24
 260:	91 1d       	adc	r25, r1
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	97 f9       	bld	r25, 7
 268:	08 95       	ret
 26a:	e1 e0       	ldi	r30, 0x01	; 1
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	88 1f       	adc	r24, r24
 272:	bb 1f       	adc	r27, r27
 274:	62 17       	cp	r22, r18
 276:	73 07       	cpc	r23, r19
 278:	84 07       	cpc	r24, r20
 27a:	ba 07       	cpc	r27, r26
 27c:	20 f0       	brcs	.+8      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 27e:	62 1b       	sub	r22, r18
 280:	73 0b       	sbc	r23, r19
 282:	84 0b       	sbc	r24, r20
 284:	ba 0b       	sbc	r27, r26
 286:	ee 1f       	adc	r30, r30
 288:	88 f7       	brcc	.-30     	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 28a:	e0 95       	com	r30
 28c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000004aa <__fixunssfsi>:
 4aa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_splitA>
 4ae:	88 f0       	brcs	.+34     	; 0x4d2 <__fixunssfsi+0x28>
 4b0:	9f 57       	subi	r25, 0x7F	; 127
 4b2:	98 f0       	brcs	.+38     	; 0x4da <__fixunssfsi+0x30>
 4b4:	b9 2f       	mov	r27, r25
 4b6:	99 27       	eor	r25, r25
 4b8:	b7 51       	subi	r27, 0x17	; 23
 4ba:	b0 f0       	brcs	.+44     	; 0x4e8 <__fixunssfsi+0x3e>
 4bc:	e1 f0       	breq	.+56     	; 0x4f6 <__fixunssfsi+0x4c>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	1a f0       	brmi	.+6      	; 0x4ce <__fixunssfsi+0x24>
 4c8:	ba 95       	dec	r27
 4ca:	c9 f7       	brne	.-14     	; 0x4be <__fixunssfsi+0x14>
 4cc:	14 c0       	rjmp	.+40     	; 0x4f6 <__fixunssfsi+0x4c>
 4ce:	b1 30       	cpi	r27, 0x01	; 1
 4d0:	91 f0       	breq	.+36     	; 0x4f6 <__fixunssfsi+0x4c>
 4d2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_zero>
 4d6:	b1 e0       	ldi	r27, 0x01	; 1
 4d8:	08 95       	ret
 4da:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_zero>
 4de:	67 2f       	mov	r22, r23
 4e0:	78 2f       	mov	r23, r24
 4e2:	88 27       	eor	r24, r24
 4e4:	b8 5f       	subi	r27, 0xF8	; 248
 4e6:	39 f0       	breq	.+14     	; 0x4f6 <__fixunssfsi+0x4c>
 4e8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ea:	cc f3       	brlt	.-14     	; 0x4de <__fixunssfsi+0x34>
 4ec:	86 95       	lsr	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b3 95       	inc	r27
 4f4:	d9 f7       	brne	.-10     	; 0x4ec <__fixunssfsi+0x42>
 4f6:	3e f4       	brtc	.+14     	; 0x506 <__fixunssfsi+0x5c>
 4f8:	90 95       	com	r25
 4fa:	80 95       	com	r24
 4fc:	70 95       	com	r23
 4fe:	61 95       	neg	r22
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000430 <__floatunsisf>:
 430:	e8 94       	clt
 432:	09 c0       	rjmp	.+18     	; 0x446 <__floatsisf+0x12>

00000434 <__floatsisf>:
 434:	97 fb       	bst	r25, 7
 436:	3e f4       	brtc	.+14     	; 0x446 <__floatsisf+0x12>
 438:	90 95       	com	r25
 43a:	80 95       	com	r24
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	8f 4f       	sbci	r24, 0xFF	; 255
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	99 23       	and	r25, r25
 448:	a9 f0       	breq	.+42     	; 0x474 <__stack+0x15>
 44a:	f9 2f       	mov	r31, r25
 44c:	96 e9       	ldi	r25, 0x96	; 150
 44e:	bb 27       	eor	r27, r27
 450:	93 95       	inc	r25
 452:	f6 95       	lsr	r31
 454:	87 95       	ror	r24
 456:	77 95       	ror	r23
 458:	67 95       	ror	r22
 45a:	b7 95       	ror	r27
 45c:	f1 11       	cpse	r31, r1
 45e:	f8 cf       	rjmp	.-16     	; 0x450 <__floatsisf+0x1c>
 460:	fa f4       	brpl	.+62     	; 0x4a0 <__stack+0x41>
 462:	bb 0f       	add	r27, r27
 464:	11 f4       	brne	.+4      	; 0x46a <__stack+0xb>
 466:	60 ff       	sbrs	r22, 0
 468:	1b c0       	rjmp	.+54     	; 0x4a0 <__stack+0x41>
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	16 c0       	rjmp	.+44     	; 0x4a0 <__stack+0x41>
 474:	88 23       	and	r24, r24
 476:	11 f0       	breq	.+4      	; 0x47c <__stack+0x1d>
 478:	96 e9       	ldi	r25, 0x96	; 150
 47a:	11 c0       	rjmp	.+34     	; 0x49e <__stack+0x3f>
 47c:	77 23       	and	r23, r23
 47e:	21 f0       	breq	.+8      	; 0x488 <__stack+0x29>
 480:	9e e8       	ldi	r25, 0x8E	; 142
 482:	87 2f       	mov	r24, r23
 484:	76 2f       	mov	r23, r22
 486:	05 c0       	rjmp	.+10     	; 0x492 <__stack+0x33>
 488:	66 23       	and	r22, r22
 48a:	71 f0       	breq	.+28     	; 0x4a8 <__stack+0x49>
 48c:	96 e8       	ldi	r25, 0x86	; 134
 48e:	86 2f       	mov	r24, r22
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	2a f0       	brmi	.+10     	; 0x4a0 <__stack+0x41>
 496:	9a 95       	dec	r25
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	da f7       	brpl	.-10     	; 0x496 <__stack+0x37>
 4a0:	88 0f       	add	r24, r24
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	97 f9       	bld	r25, 7
 4a8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000006e0 <__fp_inf>:
 6e0:	97 f9       	bld	r25, 7
 6e2:	9f 67       	ori	r25, 0x7F	; 127
 6e4:	80 e8       	ldi	r24, 0x80	; 128
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000070c <__fp_nan>:
 70c:	9f ef       	ldi	r25, 0xFF	; 255
 70e:	80 ec       	ldi	r24, 0xC0	; 192
 710:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000006b6 <__fp_pscA>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	16 16       	cp	r1, r22
 6bc:	17 06       	cpc	r1, r23
 6be:	18 06       	cpc	r1, r24
 6c0:	09 06       	cpc	r0, r25
 6c2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000006c4 <__fp_pscB>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	12 16       	cp	r1, r18
 6ca:	13 06       	cpc	r1, r19
 6cc:	14 06       	cpc	r1, r20
 6ce:	05 06       	cpc	r0, r21
 6d0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000672 <__fp_round>:
 672:	09 2e       	mov	r0, r25
 674:	03 94       	inc	r0
 676:	00 0c       	add	r0, r0
 678:	11 f4       	brne	.+4      	; 0x67e <__fp_round+0xc>
 67a:	88 23       	and	r24, r24
 67c:	52 f0       	brmi	.+20     	; 0x692 <__fp_round+0x20>
 67e:	bb 0f       	add	r27, r27
 680:	40 f4       	brcc	.+16     	; 0x692 <__fp_round+0x20>
 682:	bf 2b       	or	r27, r31
 684:	11 f4       	brne	.+4      	; 0x68a <__fp_round+0x18>
 686:	60 ff       	sbrs	r22, 0
 688:	04 c0       	rjmp	.+8      	; 0x692 <__fp_round+0x20>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000006d2 <__fp_zero>:
 6d2:	e8 94       	clt

000006d4 <__fp_szero>:
 6d4:	bb 27       	eor	r27, r27
 6d6:	66 27       	eor	r22, r22
 6d8:	77 27       	eor	r23, r23
 6da:	cb 01       	movw	r24, r22
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000704 <__mulsf3>:
 704:	0e 94 47 01 	call	0x28e	; 0x28e <__mulsf3x>
 708:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000028e <__mulsf3x>:
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <__mulsf3x+0x20>
 290:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 294:	38 f0       	brcs	.+14     	; 0x2a4 <__mulsf3x+0x16>
 296:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__mulsf3x+0x16>
 29c:	95 23       	and	r25, r21
 29e:	11 f0       	breq	.+4      	; 0x2a4 <__mulsf3x+0x16>
 2a0:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_inf>
 2a4:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>
 2a8:	11 24       	eor	r1, r1
 2aa:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 2ae:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 2b2:	70 f3       	brcs	.-36     	; 0x290 <__mulsf3x+0x2>

000002b4 <__mulsf3_pse>:
 2b4:	95 9f       	mul	r25, r21
 2b6:	c1 f3       	breq	.-16     	; 0x2a8 <__mulsf3x+0x1a>
 2b8:	95 0f       	add	r25, r21
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	55 1f       	adc	r21, r21
 2be:	62 9f       	mul	r22, r18
 2c0:	f0 01       	movw	r30, r0
 2c2:	72 9f       	mul	r23, r18
 2c4:	bb 27       	eor	r27, r27
 2c6:	f0 0d       	add	r31, r0
 2c8:	b1 1d       	adc	r27, r1
 2ca:	63 9f       	mul	r22, r19
 2cc:	aa 27       	eor	r26, r26
 2ce:	f0 0d       	add	r31, r0
 2d0:	b1 1d       	adc	r27, r1
 2d2:	aa 1f       	adc	r26, r26
 2d4:	64 9f       	mul	r22, r20
 2d6:	66 27       	eor	r22, r22
 2d8:	b0 0d       	add	r27, r0
 2da:	a1 1d       	adc	r26, r1
 2dc:	66 1f       	adc	r22, r22
 2de:	82 9f       	mul	r24, r18
 2e0:	22 27       	eor	r18, r18
 2e2:	b0 0d       	add	r27, r0
 2e4:	a1 1d       	adc	r26, r1
 2e6:	62 1f       	adc	r22, r18
 2e8:	73 9f       	mul	r23, r19
 2ea:	b0 0d       	add	r27, r0
 2ec:	a1 1d       	adc	r26, r1
 2ee:	62 1f       	adc	r22, r18
 2f0:	83 9f       	mul	r24, r19
 2f2:	a0 0d       	add	r26, r0
 2f4:	61 1d       	adc	r22, r1
 2f6:	22 1f       	adc	r18, r18
 2f8:	74 9f       	mul	r23, r20
 2fa:	33 27       	eor	r19, r19
 2fc:	a0 0d       	add	r26, r0
 2fe:	61 1d       	adc	r22, r1
 300:	23 1f       	adc	r18, r19
 302:	84 9f       	mul	r24, r20
 304:	60 0d       	add	r22, r0
 306:	21 1d       	adc	r18, r1
 308:	82 2f       	mov	r24, r18
 30a:	76 2f       	mov	r23, r22
 30c:	6a 2f       	mov	r22, r26
 30e:	11 24       	eor	r1, r1
 310:	9f 57       	subi	r25, 0x7F	; 127
 312:	50 40       	sbci	r21, 0x00	; 0
 314:	9a f0       	brmi	.+38     	; 0x33c <__mulsf3_pse+0x88>
 316:	f1 f0       	breq	.+60     	; 0x354 <__mulsf3_pse+0xa0>
 318:	88 23       	and	r24, r24
 31a:	4a f0       	brmi	.+18     	; 0x32e <__mulsf3_pse+0x7a>
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	bb 1f       	adc	r27, r27
 322:	66 1f       	adc	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	a9 f7       	brne	.-22     	; 0x318 <__mulsf3_pse+0x64>
 32e:	9e 3f       	cpi	r25, 0xFE	; 254
 330:	51 05       	cpc	r21, r1
 332:	80 f0       	brcs	.+32     	; 0x354 <__mulsf3_pse+0xa0>
 334:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_inf>
 338:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 33c:	5f 3f       	cpi	r21, 0xFF	; 255
 33e:	e4 f3       	brlt	.-8      	; 0x338 <__mulsf3_pse+0x84>
 340:	98 3e       	cpi	r25, 0xE8	; 232
 342:	d4 f3       	brlt	.-12     	; 0x338 <__mulsf3_pse+0x84>
 344:	86 95       	lsr	r24
 346:	77 95       	ror	r23
 348:	67 95       	ror	r22
 34a:	b7 95       	ror	r27
 34c:	f7 95       	ror	r31
 34e:	e7 95       	ror	r30
 350:	9f 5f       	subi	r25, 0xFF	; 255
 352:	c1 f7       	brne	.-16     	; 0x344 <__mulsf3_pse+0x90>
 354:	fe 2b       	or	r31, r30
 356:	88 0f       	add	r24, r24
 358:	91 1d       	adc	r25, r1
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	97 f9       	bld	r25, 7
 360:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000062e <__udivmodsi4>:
 62e:	a1 e2       	ldi	r26, 0x21	; 33
 630:	1a 2e       	mov	r1, r26
 632:	aa 1b       	sub	r26, r26
 634:	bb 1b       	sub	r27, r27
 636:	fd 01       	movw	r30, r26
 638:	0d c0       	rjmp	.+26     	; 0x654 <__udivmodsi4_ep>

0000063a <__udivmodsi4_loop>:
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	ee 1f       	adc	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	a2 17       	cp	r26, r18
 644:	b3 07       	cpc	r27, r19
 646:	e4 07       	cpc	r30, r20
 648:	f5 07       	cpc	r31, r21
 64a:	20 f0       	brcs	.+8      	; 0x654 <__udivmodsi4_ep>
 64c:	a2 1b       	sub	r26, r18
 64e:	b3 0b       	sbc	r27, r19
 650:	e4 0b       	sbc	r30, r20
 652:	f5 0b       	sbc	r31, r21

00000654 <__udivmodsi4_ep>:
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	1a 94       	dec	r1
 65e:	69 f7       	brne	.-38     	; 0x63a <__udivmodsi4_loop>
 660:	60 95       	com	r22
 662:	70 95       	com	r23
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	9b 01       	movw	r18, r22
 66a:	ac 01       	movw	r20, r24
 66c:	bd 01       	movw	r22, r26
 66e:	cf 01       	movw	r24, r30
 670:	08 95       	ret
