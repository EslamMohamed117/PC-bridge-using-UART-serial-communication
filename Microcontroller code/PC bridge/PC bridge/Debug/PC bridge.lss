
PC bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b0  000001b2  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d0f  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006e2  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f4  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d7  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000290  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000216f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000024a  0000024a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000004a  00000198  00000198  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_11 00000014  00000226  00000226  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000004e  000000b0  000000b0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 0000004c  0000014c  0000014c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .data.x       00000001  00800060  0000024e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.USART_INIT 0000004e  000000fe  000000fe  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.USART_Transmit 00000008  0000023a  0000023a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.USART_Receive 00000008  00000242  00000242  000002f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.libgcc.div 00000044  000001e2  000001e2  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_etext>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_2>
   c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  28:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_11>
  30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
  50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	00 02       	muls	r16, r16
  5a:	4e 00       	.word	0x004e	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  a8:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

0000024a <__bad_interrupt>:
 24a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000198 <main>:
#define F_CPU 8000000UL

volatile char x= 'x';
int main()
{
		PORTD=0b00001100;	// Enable Pull-up for INT 0 and INT 1
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	82 bb       	out	0x12, r24	; 18
		MCUCR = 0b00001010; // INT 0 and INT 1 will be triggered when falling edge signal arrives
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	85 bf       	out	0x35, r24	; 53
		GICR = 0b11000000;  // Enable INT 0 and INT 1
 1a0:	80 ec       	ldi	r24, 0xC0	; 192
 1a2:	8b bf       	out	0x3b, r24	; 59
		
		DDRA = 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8a bb       	out	0x1a, r24	; 26
		PORTA=0;
 1a8:	1b ba       	out	0x1b, r1	; 27
	USART_INIT(9600);
 1aa:	60 e8       	ldi	r22, 0x80	; 128
 1ac:	75 e2       	ldi	r23, 0x25	; 37
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_INIT>
	sei();
 1b6:	78 94       	sei
	while(1)
	{
		x = USART_Receive();
 1b8:	0e 94 21 01 	call	0x242	; 0x242 <USART_Receive>
 1bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(x == '0')
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	80 33       	cpi	r24, 0x30	; 48
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <main+0x38>
		{
			// turn off LED.
			DDRA = 255;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8a bb       	out	0x1a, r24	; 26
			PORTA = 0;
 1cc:	1b ba       	out	0x1b, r1	; 27
 1ce:	f4 cf       	rjmp	.-24     	; 0x1b8 <main+0x20>
		}
		else if(x =='1')
 1d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d4:	81 33       	cpi	r24, 0x31	; 49
 1d6:	81 f7       	brne	.-32     	; 0x1b8 <main+0x20>
		{
			// turn on LED.
			DDRA = 255;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	8a bb       	out	0x1a, r24	; 26
			PORTA = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	eb cf       	rjmp	.-42     	; 0x1b8 <main+0x20>

Disassembly of section .text.__vector_11:

00000226 <__vector_11>:
		}
	}
}
ISR(USART_RXC_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
}
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

Disassembly of section .text.__vector_1:

000000b0 <__vector_1>:
ISR(INT0_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	4f 93       	push	r20
  c0:	5f 93       	push	r21
  c2:	6f 93       	push	r22
  c4:	7f 93       	push	r23
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	USART_Transmit('A');
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_Transmit>
	PORTA=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8b bb       	out	0x1b, r24	; 27
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	5f 91       	pop	r21
  ee:	4f 91       	pop	r20
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

Disassembly of section .text.__vector_2:

0000014c <__vector_2>:
ISR(INT1_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	USART_Transmit('Z');
 16e:	8a e5       	ldi	r24, 0x5A	; 90
 170:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_Transmit>
	PORTA=0;
 174:	1b ba       	out	0x1b, r1	; 27
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

Disassembly of section .text.USART_INIT:

000000fe <USART_INIT>:
void USART_INIT(unsigned long baud)
{
	//Set Baud Rate
	//URSEL = 0 (Default)
	unsigned short UBRR;
	UBRR = (F_CPU / (16*baud)) - 1;
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	aa 1f       	adc	r26, r26
 110:	bb 1f       	adc	r27, r27
 112:	9c 01       	movw	r18, r24
 114:	ad 01       	movw	r20, r26
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	44 1f       	adc	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	72 e1       	ldi	r23, 0x12	; 18
 12a:	8a e7       	ldi	r24, 0x7A	; 122
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__udivmodsi4>
 132:	21 50       	subi	r18, 0x01	; 1
 134:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char) (UBRR >> 8);
 136:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char) UBRR;
 138:	29 b9       	out	0x09, r18	; 9
	
	
	//Enable Sender and Receiver
	SET_BIT(UCSRB,TXEN);
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	80 61       	ori	r24, 0x10	; 16
 144:	8a b9       	out	0x0a, r24	; 10
	
	//8-bit Data, No Parity Mode, Asynchronous Mode (Default), 1 stop bit (Default), Clock Polarity (default) (TX rising, RX falling)
	//URSEL = 1 (Select UCSRC)
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 146:	86 e8       	ldi	r24, 0x86	; 134
 148:	80 bd       	out	0x20, r24	; 32
 14a:	08 95       	ret

Disassembly of section .text.USART_Transmit:

0000023a <USART_Transmit>:
}
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 23a:	5d 9b       	sbis	0x0b, 5	; 11
 23c:	fe cf       	rjmp	.-4      	; 0x23a <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 23e:	8c b9       	out	0x0c, r24	; 12
 240:	08 95       	ret

Disassembly of section .text.USART_Receive:

00000242 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
 242:	5f 9b       	sbis	0x0b, 7	; 11
 244:	fe cf       	rjmp	.-4      	; 0x242 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
 246:	8c b1       	in	r24, 0x0c	; 12
}
 248:	08 95       	ret

Disassembly of section .text.libgcc.div:

000001e2 <__udivmodsi4>:
 1e2:	a1 e2       	ldi	r26, 0x21	; 33
 1e4:	1a 2e       	mov	r1, r26
 1e6:	aa 1b       	sub	r26, r26
 1e8:	bb 1b       	sub	r27, r27
 1ea:	fd 01       	movw	r30, r26
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <__udivmodsi4_ep>

000001ee <__udivmodsi4_loop>:
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	ee 1f       	adc	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	a2 17       	cp	r26, r18
 1f8:	b3 07       	cpc	r27, r19
 1fa:	e4 07       	cpc	r30, r20
 1fc:	f5 07       	cpc	r31, r21
 1fe:	20 f0       	brcs	.+8      	; 0x208 <__udivmodsi4_ep>
 200:	a2 1b       	sub	r26, r18
 202:	b3 0b       	sbc	r27, r19
 204:	e4 0b       	sbc	r30, r20
 206:	f5 0b       	sbc	r31, r21

00000208 <__udivmodsi4_ep>:
 208:	66 1f       	adc	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	1a 94       	dec	r1
 212:	69 f7       	brne	.-38     	; 0x1ee <__udivmodsi4_loop>
 214:	60 95       	com	r22
 216:	70 95       	com	r23
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	bd 01       	movw	r22, r26
 222:	cf 01       	movw	r24, r30
 224:	08 95       	ret
