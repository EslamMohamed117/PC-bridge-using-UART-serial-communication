
PC bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000071a  000007ae  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001d8  00000000  00000000  000007dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002a2f  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000cfd  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000f27  00000000  00000000  000040e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000428  00000000  00000000  00005008  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000025a  00000000  00000000  00005430  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001224  00000000  00000000  0000568a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  000068ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000006fc  000006fc  00000790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.init    00000032  000005b0  000005b0  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.LED_Off 00000012  000006d8  000006d8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LED_Init 00000016  000006c2  000006c2  00000756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_SET_PIN_DIR 000000e0  00000144  00000144  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_SET_PIN_VAL 000000e0  00000224  00000224  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_11 0000007c  00000304  00000304  00000398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_13 00000070  00000380  00000380  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.UART_Init 00000018  000006aa  000006aa  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.UART_Config 00000036  00000544  00000544  000005d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.UART_SendPayload 00000024  0000060c  0000060c  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.rx_cnt   00000002  00800082  00800082  000007ae  2**0
                  ALLOC
 24 .bss.rx_len   00000002  00800084  00800084  000007ae  2**0
                  ALLOC
 25 .bss.rx_buffer 00000002  00800086  00800086  000007ae  2**0
                  ALLOC
 26 .bss.tx_cnt   00000002  00800088  00800088  000007ae  2**0
                  ALLOC
 27 .bss.tx_len   00000002  0080008a  0080008a  000007ae  2**0
                  ALLOC
 28 .bss.tx_buffer 00000002  0080008c  0080008c  000007ae  2**0
                  ALLOC
 29 .text.main    00000006  000006f6  000006f6  0000078a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_1 00000064  000003f0  000003f0  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_2 00000064  00000454  00000454  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.Motor_init 00000042  00000502  00000502  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.squareWave 00000022  00000654  00000654  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.staircaseWave 0000004a  000004b8  000004b8  0000054c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.triangleWave 0000001a  00000676  00000676  0000070a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.sineWave 0000002a  000005e2  000005e2  00000676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.rampWave 00000024  00000630  00000630  000006c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.sawtoothWave 0000001a  00000690  00000690  00000724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.WAVE_Init 00000036  0000057a  0000057a  0000060e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .data.sine_value 0000001a  00800060  00000700  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 41 .bss.waveform 00000008  0080007a  0080007a  000007ae  2**0
                  ALLOC
 42 .text.libgcc  0000000c  000006ea  000006ea  0000077e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
   4:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_1>
   8:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_2>
   c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  10:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  14:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  18:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  1c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  20:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  24:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  28:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_11>
  30:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  34:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_13>
  38:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  3c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  40:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  44:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  48:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  4c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  50:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
  54:	ae 00       	.word	0x00ae	; ????
  56:	c7 00       	.word	0x00c7	; ????
  58:	e0 00       	.word	0x00e0	; ????
  5a:	f9 00       	.word	0x00f9	; ????
  5c:	11 01       	movw	r2, r2
  5e:	11 01       	movw	r2, r2
  60:	11 01       	movw	r2, r2
  62:	11 01       	movw	r2, r2
  64:	11 01       	movw	r2, r2
  66:	11 01       	movw	r2, r2
  68:	11 01       	movw	r2, r2
  6a:	11 01       	movw	r2, r2
  6c:	11 01       	movw	r2, r2
  6e:	11 01       	movw	r2, r2
  70:	11 01       	movw	r2, r2
  72:	11 01       	movw	r2, r2
  74:	11 01       	movw	r2, r2
  76:	11 01       	movw	r2, r2
  78:	11 01       	movw	r2, r2
  7a:	11 01       	movw	r2, r2
  7c:	11 01       	movw	r2, r2
  7e:	11 01       	movw	r2, r2
  80:	11 01       	movw	r2, r2
  82:	11 01       	movw	r2, r2
  84:	11 01       	movw	r2, r2
  86:	11 01       	movw	r2, r2
  88:	11 01       	movw	r2, r2
  8a:	11 01       	movw	r2, r2
  8c:	11 01       	movw	r2, r2
  8e:	11 01       	movw	r2, r2
  90:	11 01       	movw	r2, r2
  92:	11 01       	movw	r2, r2
  94:	ae 00       	.word	0x00ae	; ????
  96:	c7 00       	.word	0x00c7	; ????
  98:	e0 00       	.word	0x00e0	; ????
  9a:	f9 00       	.word	0x00f9	; ????
  9c:	1e 01       	movw	r2, r28
  9e:	37 01       	movw	r6, r14
  a0:	50 01       	movw	r10, r0
  a2:	69 01       	movw	r12, r18
  a4:	81 01       	movw	r16, r2
  a6:	81 01       	movw	r16, r2
  a8:	81 01       	movw	r16, r2
  aa:	81 01       	movw	r16, r2
  ac:	81 01       	movw	r16, r2
  ae:	81 01       	movw	r16, r2
  b0:	81 01       	movw	r16, r2
  b2:	81 01       	movw	r16, r2
  b4:	81 01       	movw	r16, r2
  b6:	81 01       	movw	r16, r2
  b8:	81 01       	movw	r16, r2
  ba:	81 01       	movw	r16, r2
  bc:	81 01       	movw	r16, r2
  be:	81 01       	movw	r16, r2
  c0:	81 01       	movw	r16, r2
  c2:	81 01       	movw	r16, r2
  c4:	81 01       	movw	r16, r2
  c6:	81 01       	movw	r16, r2
  c8:	81 01       	movw	r16, r2
  ca:	81 01       	movw	r16, r2
  cc:	81 01       	movw	r16, r2
  ce:	81 01       	movw	r16, r2
  d0:	81 01       	movw	r16, r2
  d2:	81 01       	movw	r16, r2
  d4:	81 01       	movw	r16, r2
  d6:	81 01       	movw	r16, r2
  d8:	81 01       	movw	r16, r2
  da:	81 01       	movw	r16, r2
  dc:	1e 01       	movw	r2, r28
  de:	37 01       	movw	r6, r14
  e0:	50 01       	movw	r10, r0
  e2:	69 01       	movw	r12, r18

000000e4 <.dinit>:
  e4:	00 60       	ori	r16, 0x00	; 0
  e6:	00 7a       	andi	r16, 0xA0	; 160
  e8:	00 07       	cpc	r16, r16
  ea:	00 00       	nop
  ec:	7a 00       	.word	0x007a	; ????
  ee:	8e 80       	ldd	r8, Y+6	; 0x06

000000f0 <__ctors_end>:
  f0:	11 24       	eor	r1, r1
  f2:	1f be       	out	0x3f, r1	; 63
  f4:	cf e5       	ldi	r28, 0x5F	; 95
  f6:	d4 e0       	ldi	r29, 0x04	; 4
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
  fc:	e4 ee       	ldi	r30, 0xE4	; 228
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	17 c0       	rjmp	.+46     	; 0x132 <__do_clear_bss+0x8>
 104:	b5 91       	lpm	r27, Z+
 106:	a5 91       	lpm	r26, Z+
 108:	35 91       	lpm	r19, Z+
 10a:	25 91       	lpm	r18, Z+
 10c:	05 91       	lpm	r16, Z+
 10e:	07 fd       	sbrc	r16, 7
 110:	0c c0       	rjmp	.+24     	; 0x12a <__do_clear_bss>
 112:	95 91       	lpm	r25, Z+
 114:	85 91       	lpm	r24, Z+
 116:	ef 01       	movw	r28, r30
 118:	f9 2f       	mov	r31, r25
 11a:	e8 2f       	mov	r30, r24
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x20>
 126:	fe 01       	movw	r30, r28
 128:	04 c0       	rjmp	.+8      	; 0x132 <__do_clear_bss+0x8>

0000012a <__do_clear_bss>:
 12a:	1d 92       	st	X+, r1
 12c:	a2 17       	cp	r26, r18
 12e:	b3 07       	cpc	r27, r19
 130:	e1 f7       	brne	.-8      	; 0x12a <__do_clear_bss>
 132:	e0 3f       	cpi	r30, 0xF0	; 240
 134:	f4 07       	cpc	r31, r20
 136:	31 f7       	brne	.-52     	; 0x104 <__do_copy_data+0x8>
 138:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <main>
 13c:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>

Disassembly of section .text:

000006fc <__bad_interrupt>:
 6fc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init:

000005b0 <init>:
#include "Init.h"

void init()
{
	// Enable int 0 , 1
	DDRD|=(1<<PIND2)|(1<<PIND3);
 5b0:	81 b3       	in	r24, 0x11	; 17
 5b2:	8c 60       	ori	r24, 0x0C	; 12
 5b4:	81 bb       	out	0x11, r24	; 17
	PORTD |=(1<<PIND2)|(1<<PIND3);	// Enable Pull-up for INT 0 and INT 1
 5b6:	82 b3       	in	r24, 0x12	; 18
 5b8:	8c 60       	ori	r24, 0x0C	; 12
 5ba:	82 bb       	out	0x12, r24	; 18
	MCUCR = 0b00001010; // INT 0 and INT 1 will be triggered when falling edge signal arrives
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	85 bf       	out	0x35, r24	; 53
	GICR = 0b11000000;  // Enable INT 0 and INT 1
 5c0:	80 ec       	ldi	r24, 0xC0	; 192
 5c2:	8b bf       	out	0x3b, r24	; 59
	//------------------
	
	UART_Config();
 5c4:	0e 94 a2 02 	call	0x544	; 0x544 <UART_Config>
	
	LED_Init();
 5c8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LED_Init>
	
	Motor_init();
 5cc:	0e 94 81 02 	call	0x502	; 0x502 <Motor_init>
	for(uint8_t i = 0; i<FULL_CMD_CNT ; i++) {cmd_buffer[i] = 0;}
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <init+0x26>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	8a 30       	cpi	r24, 0x0A	; 10
 5d8:	e8 f3       	brcs	.-6      	; 0x5d4 <init+0x24>
	WAVE_Init();
 5da:	0e 94 bd 02 	call	0x57a	; 0x57a <WAVE_Init>
	sei();
 5de:	78 94       	sei
 5e0:	08 95       	ret

Disassembly of section .text.LED_Off:

000006d8 <LED_Off>:
{
	DIO_SET_PIN_VAL('A',0,1);
}
void LED_Off()
{
	DIO_SET_PIN_VAL('A',0,0);
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	81 e4       	ldi	r24, 0x41	; 65
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 12 01 	call	0x224	; 0x224 <DIO_SET_PIN_VAL>
 6e8:	08 95       	ret

Disassembly of section .text.LED_Init:

000006c2 <LED_Init>:
#include "LED.h"

void LED_On()
{
	DIO_SET_PIN_VAL('A',0,1);
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	81 e4       	ldi	r24, 0x41	; 65
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 a2 00 	call	0x144	; 0x144 <__data_load_end>
 6d2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LED_Off>
 6d6:	08 95       	ret

Disassembly of section .text.DIO_SET_PIN_DIR:

00000144 <DIO_SET_PIN_DIR>:
#include <avr/io.h>
#include "STD_MACROS.h"

void DIO_SET_PIN_DIR(unsigned char port, unsigned char pin, unsigned char dir)
{
	switch(port)
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	e1 54       	subi	r30, 0x41	; 65
 14a:	f1 09       	sbc	r31, r1
 14c:	e4 32       	cpi	r30, 0x24	; 36
 14e:	f1 05       	cpc	r31, r1
 150:	08 f0       	brcs	.+2      	; 0x154 <DIO_SET_PIN_DIR+0x10>
 152:	67 c0       	rjmp	.+206    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 154:	e6 5d       	subi	r30, 0xD6	; 214
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__tablejump2__>
	{
		//Direction of Pin in port A
		case 'A':
		case 'a':
		if(dir == 1)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <DIO_SET_PIN_DIR+0x32>
		{
			SET_BIT(DDRA,pin);
 160:	2a b3       	in	r18, 0x1a	; 26
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SET_PIN_DIR+0x28>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SET_PIN_DIR+0x24>
 170:	82 2b       	or	r24, r18
 172:	8a bb       	out	0x1a, r24	; 26
 174:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin);
 176:	2a b3       	in	r18, 0x1a	; 26
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SET_PIN_DIR+0x3e>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SET_PIN_DIR+0x3a>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	8a bb       	out	0x1a, r24	; 26
 18c:	08 95       	ret
		break;
		
		//Direction of Pin in port B
		case 'B':
		case 'b':
		if(dir == 1)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_SET_PIN_DIR+0x64>
		{
			SET_BIT(DDRB,pin);
 192:	27 b3       	in	r18, 0x17	; 23
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_SET_PIN_DIR+0x5a>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_SET_PIN_DIR+0x56>
 1a2:	82 2b       	or	r24, r18
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SET_PIN_DIR+0x70>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SET_PIN_DIR+0x6c>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	87 bb       	out	0x17, r24	; 23
 1be:	08 95       	ret
		break;
		
		//Direction of Pin in port C
		case 'C':
		case 'c':
		if(dir == 1)
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_SET_PIN_DIR+0x96>
		{
			SET_BIT(DDRC,pin);
 1c4:	24 b3       	in	r18, 0x14	; 20
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_SET_PIN_DIR+0x8c>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_SET_PIN_DIR+0x88>
 1d4:	82 2b       	or	r24, r18
 1d6:	84 bb       	out	0x14, r24	; 20
 1d8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin);
 1da:	24 b3       	in	r18, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SET_PIN_DIR+0xa2>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SET_PIN_DIR+0x9e>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret
		break;
		
		//Direction of Pin in port D
		case 'D':
		case 'd':
		if(dir == 1)
 1f2:	41 30       	cpi	r20, 0x01	; 1
 1f4:	59 f4       	brne	.+22     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		{
			SET_BIT(DDRD,pin);
 1f6:	21 b3       	in	r18, 0x11	; 17
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SET_PIN_DIR+0xba>
 206:	82 2b       	or	r24, r18
 208:	81 bb       	out	0x11, r24	; 17
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin);
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	81 bb       	out	0x11, r24	; 17
 222:	08 95       	ret

Disassembly of section .text.DIO_SET_PIN_VAL:

00000224 <DIO_SET_PIN_VAL>:
	}
}

void DIO_SET_PIN_VAL(unsigned char port, unsigned char pin, unsigned char val)
{
	switch(port)
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	e1 54       	subi	r30, 0x41	; 65
 22a:	f1 09       	sbc	r31, r1
 22c:	e4 32       	cpi	r30, 0x24	; 36
 22e:	f1 05       	cpc	r31, r1
 230:	08 f0       	brcs	.+2      	; 0x234 <DIO_SET_PIN_VAL+0x10>
 232:	67 c0       	rjmp	.+206    	; 0x302 <DIO_SET_PIN_VAL+0xde>
 234:	e2 5b       	subi	r30, 0xB2	; 178
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__tablejump2__>
	{
		//Value of Pin in port A
		case 'A':
		case 'a':
		if(val == 1)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_SET_PIN_VAL+0x32>
		{
			SET_BIT(PORTA,pin);
 240:	2b b3       	in	r18, 0x1b	; 27
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SET_PIN_VAL+0x28>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SET_PIN_VAL+0x24>
 250:	82 2b       	or	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SET_PIN_VAL+0x3e>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SET_PIN_VAL+0x3a>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	08 95       	ret
		break;
		
		//Value of Pin in port B
		case 'B':
		case 'b':
		if(val == 1)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_SET_PIN_VAL+0x64>
		{
			SET_BIT(PORTB,pin);
 272:	28 b3       	in	r18, 0x18	; 24
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_SET_PIN_VAL+0x5a>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_SET_PIN_VAL+0x56>
 282:	82 2b       	or	r24, r18
 284:	88 bb       	out	0x18, r24	; 24
 286:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 288:	28 b3       	in	r18, 0x18	; 24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_SET_PIN_VAL+0x70>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_SET_PIN_VAL+0x6c>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	88 bb       	out	0x18, r24	; 24
 29e:	08 95       	ret
		break;
		
		//Value of Pin in port C
		case 'C':
		case 'c':
		if(val == 1)
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_SET_PIN_VAL+0x96>
		{
			SET_BIT(PORTC,pin);
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SET_PIN_VAL+0x8c>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SET_PIN_VAL+0x88>
 2b4:	82 2b       	or	r24, r18
 2b6:	85 bb       	out	0x15, r24	; 21
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_SET_PIN_VAL+0xa2>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_SET_PIN_VAL+0x9e>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	85 bb       	out	0x15, r24	; 21
 2d0:	08 95       	ret
		break;
		
		//Value of Pin in port D
		case 'D':
		case 'd':
		if(val == 1)
 2d2:	41 30       	cpi	r20, 0x01	; 1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <DIO_SET_PIN_VAL+0xc8>
		{
			SET_BIT(PORTD,pin);
 2d6:	22 b3       	in	r18, 0x12	; 18
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_SET_PIN_VAL+0xbe>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_SET_PIN_VAL+0xba>
 2e6:	82 2b       	or	r24, r18
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_SET_PIN_VAL+0xd4>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_SET_PIN_VAL+0xd0>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	82 bb       	out	0x12, r24	; 18
 302:	08 95       	ret

Disassembly of section .text.__vector_11:

00000304 <__vector_11>:
static volatile uint16_t rx_cnt;



ISR(USART_RXC_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
    uint8_t rx_data;
    
    cli();
 31e:	f8 94       	cli
    
    /* Read rx_data. */
    rx_data = UDR;
 320:	8c b1       	in	r24, 0x0c	; 12
    
    /* Ignore spaces */
    if((rx_cnt < rx_len) && (rx_data != ' '))
 322:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <rx_cnt>
 326:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <rx_cnt+0x1>
 32a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <rx_len>
 32e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <rx_len+0x1>
 332:	42 17       	cp	r20, r18
 334:	53 07       	cpc	r21, r19
 336:	b0 f4       	brcc	.+44     	; 0x364 <__vector_11+0x60>
 338:	80 32       	cpi	r24, 0x20	; 32
 33a:	a1 f0       	breq	.+40     	; 0x364 <__vector_11+0x60>
    {
        rx_buffer[rx_cnt] = rx_data;
 33c:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <rx_cnt>
 340:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <rx_cnt+0x1>
 344:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <rx_buffer>
 348:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <rx_buffer+0x1>
 34c:	e2 0f       	add	r30, r18
 34e:	f3 1f       	adc	r31, r19
 350:	80 83       	st	Z, r24
        rx_cnt++;
 352:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <rx_cnt>
 356:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <rx_cnt+0x1>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <rx_cnt+0x1>
 360:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rx_cnt>
    else
    {
        /* Do nothing. */
    }
    
    sei();
 364:	78 94       	sei
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

Disassembly of section .text.__vector_13:

00000380 <__vector_13>:

ISR(USART_TXC_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
    cli();
 396:	f8 94       	cli
    
    tx_cnt++;
 398:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <tx_cnt>
 39c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <tx_cnt+0x1>
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <tx_cnt+0x1>
 3a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <tx_cnt>
    
    if(tx_cnt < tx_len)
 3aa:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <tx_cnt>
 3ae:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <tx_cnt+0x1>
 3b2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <tx_len>
 3b6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <tx_len+0x1>
 3ba:	28 17       	cp	r18, r24
 3bc:	39 07       	cpc	r19, r25
 3be:	60 f4       	brcc	.+24     	; 0x3d8 <__vector_13+0x58>
    {
        /* Send next byte. */
        UDR = tx_buffer[tx_cnt];
 3c0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <tx_cnt>
 3c4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <tx_cnt+0x1>
 3c8:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <tx_buffer>
 3cc:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <tx_buffer+0x1>
 3d0:	e8 0f       	add	r30, r24
 3d2:	f9 1f       	adc	r31, r25
 3d4:	80 81       	ld	r24, Z
 3d6:	8c b9       	out	0x0c, r24	; 12
    }
    sei();
 3d8:	78 94       	sei
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

Disassembly of section .text.UART_Init:

000006aa <UART_Init>:
	
	UART_Init(&my_uart_cfg);
}

void UART_Init(UART_cfg *my_cfg)
{
 6aa:	fc 01       	movw	r30, r24
    /* Set baud rate */
    UBRRH = my_cfg->UBRRH_cfg;
 6ac:	80 81       	ld	r24, Z
 6ae:	80 bd       	out	0x20, r24	; 32
    UBRRL = my_cfg->UBRRL_cfg;
 6b0:	81 81       	ldd	r24, Z+1	; 0x01
 6b2:	89 b9       	out	0x09, r24	; 9
    
    UCSRA = my_cfg->UCSRA_cfg;
 6b4:	82 81       	ldd	r24, Z+2	; 0x02
 6b6:	8b b9       	out	0x0b, r24	; 11
    UCSRB = my_cfg->UCSRB_cfg;
 6b8:	83 81       	ldd	r24, Z+3	; 0x03
 6ba:	8a b9       	out	0x0a, r24	; 10
    UCSRC = my_cfg->UCSRC_cfg;
 6bc:	84 81       	ldd	r24, Z+4	; 0x04
 6be:	80 bd       	out	0x20, r24	; 32
 6c0:	08 95       	ret

Disassembly of section .text.UART_Config:

00000544 <UART_Config>:
        UDR = tx_buffer[tx_cnt];
    }
    sei();
}
void UART_Config()
{
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	00 d0       	rcall	.+0      	; 0x54a <UART_Config+0x6>
 54a:	00 d0       	rcall	.+0      	; 0x54c <UART_Config+0x8>
 54c:	1f 92       	push	r1
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
	/* Init UART driver. */
	UART_cfg my_uart_cfg;
	
	/* Set USART mode. */
	my_uart_cfg.UBRRL_cfg = (BAUD_RATE_VALUE)&0x00FF;
 552:	83 e3       	ldi	r24, 0x33	; 51
 554:	8a 83       	std	Y+2, r24	; 0x02
	my_uart_cfg.UBRRH_cfg = (((BAUD_RATE_VALUE)&0xFF00)>>8);
 556:	19 82       	std	Y+1, r1	; 0x01
	
	my_uart_cfg.UCSRA_cfg = 0;
 558:	1b 82       	std	Y+3, r1	; 0x03
	my_uart_cfg.UCSRB_cfg = (1<<RXEN)  | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE);
 55a:	88 ed       	ldi	r24, 0xD8	; 216
 55c:	8c 83       	std	Y+4, r24	; 0x04
	my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
 55e:	86 e8       	ldi	r24, 0x86	; 134
 560:	8d 83       	std	Y+5, r24	; 0x05
	
	UART_Init(&my_uart_cfg);
 562:	ce 01       	movw	r24, r28
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	0e 94 55 03 	call	0x6aa	; 0x6aa <UART_Init>
}
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

Disassembly of section .text.UART_SendPayload:

0000060c <UART_SendPayload>:
    
}

void UART_SendPayload(uint8_t *tx_data, uint16_t len)
{
    tx_buffer = tx_data;
 60c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <tx_buffer+0x1>
 610:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <tx_buffer>
    tx_len    = len;
 614:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <tx_len+0x1>
 618:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <tx_len>
    tx_cnt    = 0;
 61c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <tx_cnt+0x1>
 620:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <tx_cnt>
    
    /* Wait for UDR is empty. */
    while(0 == (UCSRA & (1 << UDRE)));
 624:	5d 9b       	sbis	0x0b, 5	; 11
 626:	fe cf       	rjmp	.-4      	; 0x624 <UART_SendPayload+0x18>
    
    /* Send the first byte to trigger the TxC interrupt. */
    UDR = tx_buffer[0];
 628:	fc 01       	movw	r30, r24
 62a:	80 81       	ld	r24, Z
 62c:	8c b9       	out	0x0c, r24	; 12
 62e:	08 95       	ret

Disassembly of section .text.main:

000006f6 <main>:

#include "Init/Init.h"

int main(void)
{
	init();
 6f6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <init>
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <main+0x4>

Disassembly of section .text.__vector_1:

000003f0 <__vector_1>:
	}
}		


ISR(INT0_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	1f 92       	push	r1
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
	uint8_t A= 'A';
 41c:	81 e4       	ldi	r24, 0x41	; 65
 41e:	89 83       	std	Y+1, r24	; 0x01
	UART_SendPayload(&A,1);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 06 03 	call	0x60c	; 0x60c <UART_SendPayload>
}
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

Disassembly of section .text.__vector_2:

00000454 <__vector_2>:
ISR(INT1_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	1f 92       	push	r1
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	uint8_t Z= 'Z';
 480:	8a e5       	ldi	r24, 0x5A	; 90
 482:	89 83       	std	Y+1, r24	; 0x01
	UART_SendPayload(&Z,1);
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	0e 94 06 03 	call	0x60c	; 0x60c <UART_SendPayload>
}
 490:	0f 90       	pop	r0
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

Disassembly of section .text.Motor_init:

00000502 <Motor_init>:
}


void Motor_init()
{
	DIO_SET_PIN_DIR('A',1,1);
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e4       	ldi	r24, 0x41	; 65
 508:	0e 94 a2 00 	call	0x144	; 0x144 <__data_load_end>
	DIO_SET_PIN_VAL('A',1,1);	// Setting direction of motor
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	81 e4       	ldi	r24, 0x41	; 65
 512:	0e 94 12 01 	call	0x224	; 0x224 <DIO_SET_PIN_VAL>
	DIO_SET_PIN_DIR('A',2,1);	// Setting first two pins of port A as output for controlling the driver
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	81 e4       	ldi	r24, 0x41	; 65
 51c:	0e 94 a2 00 	call	0x144	; 0x144 <__data_load_end>
	DIO_SET_PIN_VAL('A',2,0);	// Setting first two pins of port A as output for controlling the driver
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	62 e0       	ldi	r22, 0x02	; 2
 524:	81 e4       	ldi	r24, 0x41	; 65
 526:	0e 94 12 01 	call	0x224	; 0x224 <DIO_SET_PIN_VAL>
	DIO_SET_PIN_DIR('D',7,1);	// Setting pin 3 of port b as output for PWM signal generated at OC2
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	67 e0       	ldi	r22, 0x07	; 7
 52e:	84 e4       	ldi	r24, 0x44	; 68
 530:	0e 94 a2 00 	call	0x144	; 0x144 <__data_load_end>
	DIO_SET_PIN_VAL('D',7,0);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	67 e0       	ldi	r22, 0x07	; 7
 538:	84 e4       	ldi	r24, 0x44	; 68
 53a:	0e 94 12 01 	call	0x224	; 0x224 <DIO_SET_PIN_VAL>
	

	// TIMER2
	TCCR2=0b01110101;	//Configure Timer2 to run at Phase correct PWM
 53e:	85 e7       	ldi	r24, 0x75	; 117
 540:	85 bd       	out	0x25, r24	; 37
 542:	08 95       	ret

Disassembly of section .text.squareWave:

00000654 <squareWave>:
unsigned int sine_value[13] = {128,192,238,255,238,192,128,64,17,0,17,64,128};


void squareWave(uint8_t amp, uint8_t freq)
{
	DAC_DDR = 255;
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	87 bb       	out	0x17, r24	; 23
    DAC_PORT = 0xFF;
 658:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65a:	87 ea       	ldi	r24, 0xA7	; 167
 65c:	91 e6       	ldi	r25, 0x61	; 97
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <squareWave+0xa>
 662:	00 c0       	rjmp	.+0      	; 0x664 <squareWave+0x10>
 664:	00 00       	nop
    _delay_ms(100);
    DAC_PORT = 0;
 666:	18 ba       	out	0x18, r1	; 24
 668:	87 ea       	ldi	r24, 0xA7	; 167
 66a:	91 e6       	ldi	r25, 0x61	; 97
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <squareWave+0x18>
 670:	00 c0       	rjmp	.+0      	; 0x672 <squareWave+0x1e>
 672:	00 00       	nop
 674:	08 95       	ret

Disassembly of section .text.staircaseWave:

000004b8 <staircaseWave>:
    _delay_ms(100);
}

void staircaseWave(uint8_t amp, uint8_t freq)
{
    DAC_DDR = 255;
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	87 bb       	out	0x17, r24	; 23
    DAC_PORT = 0x00;
 4bc:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	92 e4       	ldi	r25, 0x42	; 66
 4c0:	9a 95       	dec	r25
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <staircaseWave+0x8>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <staircaseWave+0xe>
    _delay_us(200);
    DAC_PORT = 0x33;
 4c6:	93 e3       	ldi	r25, 0x33	; 51
 4c8:	98 bb       	out	0x18, r25	; 24
 4ca:	92 e4       	ldi	r25, 0x42	; 66
 4cc:	9a 95       	dec	r25
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <staircaseWave+0x14>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <staircaseWave+0x1a>
    _delay_us(200);
    DAC_PORT = 0x66;
 4d2:	96 e6       	ldi	r25, 0x66	; 102
 4d4:	98 bb       	out	0x18, r25	; 24
 4d6:	92 e4       	ldi	r25, 0x42	; 66
 4d8:	9a 95       	dec	r25
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <staircaseWave+0x20>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <staircaseWave+0x26>
    _delay_us(200);
    DAC_PORT = 0x99;
 4de:	99 e9       	ldi	r25, 0x99	; 153
 4e0:	98 bb       	out	0x18, r25	; 24
 4e2:	92 e4       	ldi	r25, 0x42	; 66
 4e4:	9a 95       	dec	r25
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <staircaseWave+0x2c>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <staircaseWave+0x32>
    _delay_us(200);
    DAC_PORT = 0xCC;
 4ea:	9c ec       	ldi	r25, 0xCC	; 204
 4ec:	98 bb       	out	0x18, r25	; 24
 4ee:	92 e4       	ldi	r25, 0x42	; 66
 4f0:	9a 95       	dec	r25
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <staircaseWave+0x38>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <staircaseWave+0x3e>
    _delay_us(200);
    DAC_PORT = 0xFF;
 4f6:	88 bb       	out	0x18, r24	; 24
 4f8:	82 e4       	ldi	r24, 0x42	; 66
 4fa:	8a 95       	dec	r24
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <staircaseWave+0x42>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <staircaseWave+0x48>
 500:	08 95       	ret

Disassembly of section .text.triangleWave:

00000676 <triangleWave>:
    _delay_us(200);
}

void triangleWave(uint8_t amp, uint8_t freq)
{
    DAC_DDR = 255;
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	87 bb       	out	0x17, r24	; 23
    DAC_PORT = 0xFF;
 67a:	88 bb       	out	0x18, r24	; 24
 67c:	80 e1       	ldi	r24, 0x10	; 16
 67e:	8a 95       	dec	r24
 680:	f1 f7       	brne	.-4      	; 0x67e <triangleWave+0x8>
 682:	00 c0       	rjmp	.+0      	; 0x684 <triangleWave+0xe>
    _delay_us(50);
    DAC_PORT = 0;
 684:	18 ba       	out	0x18, r1	; 24
 686:	80 e1       	ldi	r24, 0x10	; 16
 688:	8a 95       	dec	r24
 68a:	f1 f7       	brne	.-4      	; 0x688 <triangleWave+0x12>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <triangleWave+0x18>
 68e:	08 95       	ret

Disassembly of section .text.sineWave:

000005e2 <sineWave>:
    _delay_us(50);
}

void sineWave(uint8_t amp, uint8_t freq)
{
    DAC_DDR = 255;
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	87 bb       	out	0x17, r24	; 23
    for(int i=0;i<13;i++)
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <sineWave+0x22>
    {
		DAC_PORT = sine_value[i];
 5ec:	fc 01       	movw	r30, r24
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	e0 5a       	subi	r30, 0xA0	; 160
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	20 81       	ld	r18, Z
 5f8:	28 bb       	out	0x18, r18	; 24
 5fa:	21 e2       	ldi	r18, 0x21	; 33
 5fc:	2a 95       	dec	r18
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <sineWave+0x1a>
 600:	00 00       	nop
}

void sineWave(uint8_t amp, uint8_t freq)
{
    DAC_DDR = 255;
    for(int i=0;i<13;i++)
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	8d 30       	cpi	r24, 0x0D	; 13
 606:	91 05       	cpc	r25, r1
 608:	8c f3       	brlt	.-30     	; 0x5ec <sineWave+0xa>
    {
		DAC_PORT = sine_value[i];
		_delay_us(100);
	}
}
 60a:	08 95       	ret

Disassembly of section .text.rampWave:

00000630 <rampWave>:
void rampWave(uint8_t amp, uint8_t freq)
{
	DAC_DDR = 255;
 630:	9f ef       	ldi	r25, 0xFF	; 255
 632:	97 bb       	out	0x17, r25	; 23
	for(int i=0;i<amp;i++)
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	07 c0       	rjmp	.+14     	; 0x648 <rampWave+0x18>
	{
		DAC_PORT = i;
 63a:	28 bb       	out	0x18, r18	; 24
 63c:	93 e5       	ldi	r25, 0x53	; 83
 63e:	9a 95       	dec	r25
 640:	f1 f7       	brne	.-4      	; 0x63e <rampWave+0xe>
 642:	00 00       	nop
	}
}
void rampWave(uint8_t amp, uint8_t freq)
{
	DAC_DDR = 255;
	for(int i=0;i<amp;i++)
 644:	2f 5f       	subi	r18, 0xFF	; 255
 646:	3f 4f       	sbci	r19, 0xFF	; 255
 648:	48 2f       	mov	r20, r24
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	24 17       	cp	r18, r20
 64e:	35 07       	cpc	r19, r21
 650:	a4 f3       	brlt	.-24     	; 0x63a <rampWave+0xa>
	{
		DAC_PORT = i;
		_delay_us(250);
	}
	
}
 652:	08 95       	ret

Disassembly of section .text.sawtoothWave:

00000690 <sawtoothWave>:
void sawtoothWave(uint8_t amp, uint8_t freq)
{
	const int time = (1/freq)* pow(10,-6);
	
	DAC_DDR = 255;
 690:	9f ef       	ldi	r25, 0xFF	; 255
 692:	97 bb       	out	0x17, r25	; 23
	for(int i=amp;i>=0;i--) 
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <sawtoothWave+0x14>
	{
		DAC_PORT = i;
 698:	88 bb       	out	0x18, r24	; 24
 69a:	23 e0       	ldi	r18, 0x03	; 3
 69c:	2a 95       	dec	r18
 69e:	f1 f7       	brne	.-4      	; 0x69c <sawtoothWave+0xc>
 6a0:	00 00       	nop
void sawtoothWave(uint8_t amp, uint8_t freq)
{
	const int time = (1/freq)* pow(10,-6);
	
	DAC_DDR = 255;
	for(int i=amp;i>=0;i--) 
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	99 23       	and	r25, r25
 6a6:	c4 f7       	brge	.-16     	; 0x698 <sawtoothWave+0x8>
	{
		DAC_PORT = i;
		_delay_us(10);
	}
	
}
 6a8:	08 95       	ret

Disassembly of section .text.WAVE_Init:

0000057a <WAVE_Init>:
void WAVE_Init(void)
{
    uint8_t i;
    
    /* Initialize waveform array. */
    waveform[0] = squareWave;
 57a:	ea e7       	ldi	r30, 0x7A	; 122
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	8a e2       	ldi	r24, 0x2A	; 42
 580:	93 e0       	ldi	r25, 0x03	; 3
 582:	91 83       	std	Z+1, r25	; 0x01
 584:	80 83       	st	Z, r24
    waveform[1] = staircaseWave;
 586:	8c e5       	ldi	r24, 0x5C	; 92
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	93 83       	std	Z+3, r25	; 0x03
 58c:	82 83       	std	Z+2, r24	; 0x02
    waveform[2] = triangleWave;
 58e:	8b e3       	ldi	r24, 0x3B	; 59
 590:	93 e0       	ldi	r25, 0x03	; 3
 592:	95 83       	std	Z+5, r25	; 0x05
 594:	84 83       	std	Z+4, r24	; 0x04
    waveform[3] = sineWave;
 596:	81 ef       	ldi	r24, 0xF1	; 241
 598:	92 e0       	ldi	r25, 0x02	; 2
 59a:	97 83       	std	Z+7, r25	; 0x07
 59c:	86 83       	std	Z+6, r24	; 0x06
	waveform[4] = rampWave;
 59e:	88 e1       	ldi	r24, 0x18	; 24
 5a0:	93 e0       	ldi	r25, 0x03	; 3
 5a2:	91 87       	std	Z+9, r25	; 0x09
 5a4:	80 87       	std	Z+8, r24	; 0x08
	waveform[5] = sawtoothWave;
 5a6:	88 e4       	ldi	r24, 0x48	; 72
 5a8:	93 e0       	ldi	r25, 0x03	; 3
 5aa:	93 87       	std	Z+11, r25	; 0x0b
 5ac:	82 87       	std	Z+10, r24	; 0x0a
 5ae:	08 95       	ret

Disassembly of section .text.libgcc:

000006ea <__tablejump2__>:
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	05 90       	lpm	r0, Z+
 6f0:	f4 91       	lpm	r31, Z
 6f2:	e0 2d       	mov	r30, r0
 6f4:	09 94       	ijmp
